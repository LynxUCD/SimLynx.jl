var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimLynx","category":"page"},{"location":"#SimLynx","page":"Home","title":"SimLynx","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SimLynx]","category":"page"},{"location":"#SimLynx.current_simulation","page":"Home","title":"SimLynx.current_simulation","text":"The current active simulation.\n\n\n\n\n\n","category":"constant"},{"location":"#SimLynx.Allocation","page":"Home","title":"SimLynx.Allocation","text":"A (unit) allocation of the resource to a process.\n\n\n\n\n\n","category":"type"},{"location":"#SimLynx.Notice","page":"Home","title":"SimLynx.Notice","text":"A notice represents the execution of an event at some (simulated) future time.\n\n\n\n\n\n","category":"type"},{"location":"#SimLynx.Resource","page":"Home","title":"SimLynx.Resource","text":"A sharable resource with a fixed number of allocatable units. The queue maintains a list of processes waiting for the resource.\n\n\n\n\n\n","category":"type"},{"location":"#SimLynx.Simulation","page":"Home","title":"SimLynx.Simulation","text":"A simulation represents the state of an execution. Specifically, it contains the current time, current event, future event list, and control task for the simulation.\n\n\n\n\n\n","category":"type"},{"location":"#SimLynx.Variable","page":"Home","title":"SimLynx.Variable","text":"A variable automatically maintains the history and statistics of its value over time.\n\n\n\n\n\n","category":"type"},{"location":"#Base.get-Tuple{SimLynx.Variable}","page":"Home","title":"Base.get","text":"Return the current value of a variable.\n\n\n\n\n\n","category":"method"},{"location":"#Base.schedule-Tuple{Notice}","page":"Home","title":"Base.schedule","text":"schedule(notice::Notice)\nschedule(sim::Simulation, notice::Notice)\n\nSchedule the notice on the future event list for the specified simulation, which defaults to the current simulation.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.allocate-Tuple{SimLynx.Resource,Process}","page":"Home","title":"SimLynx.allocate","text":"Allocate a unit of the resource to a process.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.deallocate-Tuple{SimLynx.Resource,Process}","page":"Home","title":"SimLynx.deallocate","text":"Deallocate a unit of the resource from a process.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.event_schedule-Tuple{Notice,Array{Notice,1}}","page":"Home","title":"SimLynx.event_schedule","text":"event_schedule(notice::Notice, event_list::Array{Notice, 1})\n\nAdd a notice to the given event list. This routine keeps the event list in sorted (ascending) order.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.interrupt-Tuple{Process}","page":"Home","title":"SimLynx.interrupt","text":"Interrupt the execution of a waiting process.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.islessorequal-Tuple{Notice,Notice}","page":"Home","title":"SimLynx.islessorequal","text":"Ascending order function for event lists.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.print_stats","page":"Home","title":"SimLynx.print_stats","text":"Print the accumulates statistics for a variable.\n\n\n\n\n\n","category":"function"},{"location":"#SimLynx.release-Tuple{SimLynx.Resource}","page":"Home","title":"SimLynx.release","text":"release(resource::Resource)\n\nRelease a unit of the resource. If there are process queued for the resource, then allocate a unit of the resource to the longest waiting process. Note that this works for unit allocations.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.request-Tuple{SimLynx.Resource}","page":"Home","title":"SimLynx.request","text":"request(resource::Resource)\n\nRequest a unit of the resource. If a unit of the resource is not available, then queue the request.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.resume-Tuple{Process,Notice}","page":"Home","title":"SimLynx.resume","text":"Resume the execution of a suspended or interrupted process.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.set!-Tuple{SimLynx.Variable,Any}","page":"Home","title":"SimLynx.set!","text":"Set the value of a variable.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.start_simulation-Tuple{}","page":"Home","title":"SimLynx.start_simulation","text":"start_simulation()\n\nThis is the main simulation loop.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.suspend-Tuple{}","page":"Home","title":"SimLynx.suspend","text":"Suspend the execution of the current process.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.sync!-Tuple{SimLynx.Variable}","page":"Home","title":"SimLynx.sync!","text":"Synchronize the history and statistics for a variable. This is called before the value of a variable is changed, via set!, and before the history or statistics are used.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.update!-Union{Tuple{T}, Tuple{SimLynx.AccumulatedStats{T},T,Float64}} where T<:Real","page":"Home","title":"SimLynx.update!","text":"Accumulate running statistics over a time duration.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.update!-Union{Tuple{T}, Tuple{SimLynx.TalliedStats{T},T}} where T<:Real","page":"Home","title":"SimLynx.update!","text":"Tally running statistics.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.work-Tuple{Real}","page":"Home","title":"SimLynx.work","text":"work(delay::Real)\n\nSimulate the delay while work is being done.  Add an event to return to this task in the future to the event list.\n\n\n\n\n\n","category":"method"},{"location":"#SimLynx.@event-Tuple{Any,Any}","page":"Home","title":"SimLynx.@event","text":"@event <sig> begin\n    <body>\nend\n\nDefine a simulation event with the specified signature and implemented by the given body.\n\n\n\n\n\n","category":"macro"},{"location":"#SimLynx.@process-Tuple{Any,Any}","page":"Home","title":"SimLynx.@process","text":"@process <sig> begin\n    <body>\nend\n\nDefine a simulation process with the specified signature and implemented by the given body.\n\n\n\n\n\n","category":"macro"},{"location":"#SimLynx.@schedule-Tuple{Symbol,Expr}","page":"Home","title":"SimLynx.@schedule","text":"@schedule now <expr>\n@schedule at <time> <expr>\n@schedule in <delta> <expr>\n\nSchedule an event to occur in the future. The create an event and adds it to the future event list at the specified time.\n\n\n\n\n\n","category":"macro"},{"location":"#SimLynx.@thunk-Tuple{Any}","page":"Home","title":"SimLynx.@thunk","text":"@thunk ex\n\nReturn a thunk (i.e., a function with no arguments) that executes the expression when called.\n\n\n\n\n\n","category":"macro"},{"location":"#SimLynx.@with_new_simulation-Tuple{Any}","page":"Home","title":"SimLynx.@with_new_simulation","text":"@with_new_simulation begin\n    <body>\nend\n\nExecutes the body within a new simulation environment. This is the easiest way to ensure a clean simulation environment.\n\n\n\n\n\n","category":"macro"},{"location":"#SimLynx.@with_resource-Tuple{Any,Any}","page":"Home","title":"SimLynx.@with_resource","text":"@with_resource resource begin\n    body\nend\n\nWrap the body in a request / release pair for the resource.\n\n\n\n\n\n","category":"macro"}]
}
